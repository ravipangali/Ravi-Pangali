function loadScript(src){return new Promise((resolve,reject)=>{const script=document.createElement('script');script.src=src;script.onload=()=> resolve();script.onerror=()=> reject(new Error(`Script load error:${src}`));document.head.appendChild(script);});}document.addEventListener('DOMContentLoaded',async function(){console.log('Initializing portfolio application...');try{await loadScript('/static/js/base.js');console.log('Base script loaded');await loadScript('/static/js/components/header.js');console.log('Header component loaded');initHomePage();setTimeout(()=>{const floatBtn=document.getElementById('theme-float-toggle');if(floatBtn){floatBtn.classList.add('animate-fadeIn');}},1000);}catch(error){console.error('Error initializing application:',error);}});function initHomePage(){typeWriterEffect();initAnimations();}function typeWriterEffect(){const phrases=[ "Full Stack Developer","UI/UX Designer","Blockchain Explorer","Creative Technologist" ];let currentPhraseIndex=0;let currentCharIndex=0;let isDeleting=false;let typingSpeed=100;const textElement=document.querySelector('.typewriter-text');if(!textElement)return;function type(){const currentPhrase=phrases[currentPhraseIndex];if(isDeleting){textElement.textContent=currentPhrase.substring(0,currentCharIndex - 1);currentCharIndex--;typingSpeed=50;}else{textElement.textContent=currentPhrase.substring(0,currentCharIndex + 1);currentCharIndex++;typingSpeed=150;}if(!isDeleting && currentCharIndex===currentPhrase.length){isDeleting=true;typingSpeed=1500;}else if(isDeleting && currentCharIndex===0){isDeleting=false;currentPhraseIndex=(currentPhraseIndex + 1)% phrases.length;typingSpeed=500;}setTimeout(type,typingSpeed);}type();}function initAnimations(){const fadeEls=document.querySelectorAll('.fade-in');const observer=new IntersectionObserver((entries)=>{entries.forEach(entry=>{if(entry.isIntersecting){entry.target.classList.add('visible');}});},{threshold:0.2});fadeEls.forEach(el=> observer.observe(el));animateSkillBars();}function animateSkillBars(){const skillBars=document.querySelectorAll('.skill-progress');if(skillBars.length===0)return;const observer=new IntersectionObserver((entries)=>{entries.forEach(entry=>{if(entry.isIntersecting){const progressBar=entry.target;const percentage=progressBar.getAttribute('data-percentage');progressBar.style.width=percentage + '%';progressBar.classList.add('animate');}});},{threshold:0.2});skillBars.forEach(bar=> observer.observe(bar));}